C51 COMPILER V9.60.0.0   USER                                                              02/13/2023 11:33:41 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE USER
OBJECT MODULE PLACED IN .\Objects\user.obj
COMPILER INVOKED BY: D:\keil\C51\BIN\C51.EXE mycode\user.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -user.lst) OBJECT(.\Objects\user.obj)

line level    source

   1          #include "user.h"
   2          
   3          //screen_pwm的极限范围1-100
   4          #define SCREEN_PWM_MIN 1
   5          #define SCREEN_PWM_MAX 80
   6          
   7          //cmp_pwm的极限范围0-100
   8          #define CMP_PWM_MIN 0
   9          #define CMP_PWM_MAX 80
  10          
  11          s16 cmp_pwm_result = 40;
  12          s16 screen_pwm_duty_limit = 80;
  13          
  14          void CLK_Init(void)
  15          {
  16   1              set_bit(P_SW2,7);//EAXFR 1:允许访问
  17   1              CLKSEL = 0x00;//内部24MHZ的IRC
  18   1              CLKDIV = 0;//MCLK/1
  19   1      }
  20          
  21          void GPIO_Init(void)
  22          {
  23   1              //P10准双向口
  24   1      //      reset_bit(P1M1,0);
  25   1      //      reset_bit(P1M0,0);
  26   1              //P11强推挽
  27   1              reset_bit(P1M1,1);
  28   1              set_bit(P1M0,1);
  29   1              //P35强推挽
  30   1              reset_bit(P3M1,5);
  31   1              set_bit(P3M0,5);
  32   1      }
  33          
  34          //比较器初始化
  35          void COPMPARE_Init(void)
  36          {
  37   1              CMPCR1 = 0x84;
  38   1              CMPCR2 = 0X0F;  
  39   1      }
  40          
  41          
  42          //比较器
  43          void cmp_pwm_duty_adjust(void)
  44          {
  45   1              u8 i = 0;
  46   1              static s16 pwm_duty_array[4] = {0};
  47   1              static u8 cmp_cnt = 0;
  48   1              static u16 cmp_cnt2 = 0;
  49   1              static s16 cmp_pwm_result_temp1 = 0;
  50   1              static s16 cmp_pwm_result_temp2 = 0;
  51   1      
  52   1              if(f_cmp_10ms)
  53   1              {
  54   2                      f_cmp_10ms = 0;                         
C51 COMPILER V9.60.0.0   USER                                                              02/13/2023 11:33:41 PAGE 2   

  55   2                      if(CMPCR1 & 0x01)
  56   2                      {       
  57   3                              if(cmp_pwm_duty < CMP_PWM_MAX)
  58   3                              {
  59   4                                      cmp_pwm_duty += 1;
  60   4                              }
  61   3                      }
  62   2                      else
  63   2                      {
  64   3                              if(cmp_pwm_duty > CMP_PWM_MIN)
  65   3                              {
  66   4                                      cmp_pwm_duty -= 1;
  67   4                              }
  68   3                      }
  69   2      
  70   2                      
  71   2                      pwm_duty_array[cmp_cnt] = cmp_pwm_duty;
  72   2                      cmp_cnt++;
  73   2                      if(cmp_cnt >= 4)
  74   2                      {
  75   3                              cmp_cnt = 0;
  76   3                              cmp_pwm_result_temp1 = 0;
  77   3                              for(i = 0;i < 4;i++)
  78   3                              {
  79   4                                      cmp_pwm_result_temp1 += pwm_duty_array[i];
  80   4                              }
  81   3                              cmp_pwm_result_temp1 /= 4;
  82   3                      }                                       
  83   2                      
  84   2                      
  85   2                      if((cmp_pwm_result_temp1 < cmp_pwm_result_temp2 - 2) || (cmp_pwm_result_temp1 > cmp_pwm_result_temp2 + 2
             -))
  86   2                      {
  87   3                              cmp_cnt2++;
  88   3                              if(cmp_cnt2 >= 500)
  89   3                              {
  90   4                                      cmp_cnt2 = 0;
  91   4                                      if(cmp_pwm_result_temp1 <= 10)
  92   4                                      {
  93   5                                              cmp_pwm_result = 5;
  94   5                                      }
  95   4                                      else if(cmp_pwm_result_temp1 <= 25)
  96   4                                      {
  97   5                                              cmp_pwm_result = 4;
  98   5      //                                      cmp_pwm_result = (200 - cmp_pwm_result_temp1*3)/10;
  99   5                                      }
 100   4                                      else if(cmp_pwm_result_temp1 <= 40)
 101   4                                      {
 102   5                                              cmp_pwm_result = 3;
 103   5                                      }
 104   4                                      else if(cmp_pwm_result_temp1 <= 55)
 105   4                                      {
 106   5                                              cmp_pwm_result = 2;
 107   5                                      }
 108   4                                      else if(cmp_pwm_result_temp1 <= 65)
 109   4                                      {
 110   5                                              cmp_pwm_result = 1;
 111   5                                      }
 112   4                                      else
 113   4                                      {
 114   5                                              cmp_pwm_result = 1;
 115   5                                      }                                                               
C51 COMPILER V9.60.0.0   USER                                                              02/13/2023 11:33:41 PAGE 3   

 116   4                                      cmp_pwm_result_temp2 = cmp_pwm_result_temp1;
 117   4                              }                               
 118   3                      }
 119   2                      else    
 120   2                      {
 121   3                              cmp_cnt2 = 0;
 122   3                      }                       
 123   2              }
 124   1      }
 125          
 126          //屏幕亮度调节
 127          void screen_pwm_duty_adjust(void)
 128          {       
 129   1              static u8 screen_t1 = 0;
 130   1              if(f_screen_10ms)
 131   1              {
 132   2                      f_screen_10ms = 0;
 133   2                      screen_t1++;
 134   2                      if(screen_t1 >= 3)
 135   2                      {
 136   3                              screen_t1 = 0;  
 137   3                              
 138   3                              if(cmp_pwm_result > SCREEN_PWM_MAX)
 139   3                              {
 140   4                                      cmp_pwm_result = SCREEN_PWM_MAX;
 141   4                              }
 142   3                              else if(cmp_pwm_result < SCREEN_PWM_MIN)
 143   3                              {
 144   4                                      cmp_pwm_result = SCREEN_PWM_MIN;
 145   4                              }               
 146   3                              
 147   3                              if(screen_pwm_duty < cmp_pwm_result)
 148   3                              {
 149   4                                      screen_pwm_duty++;
 150   4                              }
 151   3                              else if(screen_pwm_duty > cmp_pwm_result)
 152   3                              {                                                                       
 153   4                                      screen_pwm_duty--;                      
 154   4                              }                               
 155   3                      }
 156   2              }
 157   1      }
 158          
 159          
 160          
 161                                          
 162          
 163          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    469    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     20    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
